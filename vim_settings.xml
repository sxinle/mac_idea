<application>
  <component name="RelativeLineNumbersSettings">
    <option name="enabled" value="false" />
  </component>
  <component name="VimSettings">
    <state version="4" enabled="true" />
    <globalmarks />
    <filemarks>
      <file name="$USER_HOME$/workspace/jinhui/crm/conf/application-context.xml" timestamp="1519640918267">
        <mark key="'" line="42" column="67" />
        <mark key="[" line="86" column="54" />
        <mark key="]" line="86" column="67" />
        <mark key="." line="86" column="67" />
        <mark key="^" line="86" column="67" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/prod/pointshub/app/controllers/console/LoginController.java" timestamp="1519699712530" />
      <file name="/Dummy.txt" timestamp="1519656458373">
        <mark key="'" line="0" column="2" />
        <mark key="[" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/app/util/redpack/HttpUtil.java" timestamp="1519656434129">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="117" column="1" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/mobCalls.scala.html" timestamp="1519656194387">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1120" column="6" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" timestamp="1519641293668">
        <mark key="'" line="19" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="146" column="0" />
        <mark key="^" line="18" column="1" />
        <mark key="." line="18" column="1" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/routes" timestamp="1519694665528">
        <mark key="'" line="0" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/jh_clear/anti/app/service/impl/TrayServiceImpl.java" timestamp="1519658861421">
        <mark key="'" line="2" column="26" />
        <mark key="[" line="150" column="11" />
        <mark key="]" line="150" column="11" />
        <mark key="." line="150" column="11" />
      </file>
      <file name="/TrayServiceImpl.java" timestamp="1519658842206">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="267" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/app/views/mobCalls.scala.html" timestamp="1519656206378">
        <mark key="[" line="0" column="0" />
        <mark key="]" line="1120" column="7" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/conf/application.conf" timestamp="1519643976514">
        <mark key="'" line="15" column="0" />
        <mark key="[" line="15" column="52" />
        <mark key="]" line="15" column="65" />
        <mark key="." line="15" column="65" />
        <mark key="^" line="15" column="65" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/app/controllers/console/PrizeManager.java" timestamp="1519644426720">
        <mark key="'" line="406" column="30" />
        <mark key="[" line="372" column="32" />
        <mark key="]" line="372" column="44" />
        <mark key="." line="372" column="44" />
        <mark key="^" line="372" column="44" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/application-context.xml" timestamp="1519657516338">
        <mark key="'" line="97" column="0" />
        <mark key="[" line="39" column="0" />
        <mark key="]" line="39" column="0" />
        <mark key="." line="80" column="41" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/migerate/2018-01-29.sql" timestamp="1519636706266">
        <mark key="'" line="64" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="64" column="0" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" timestamp="1519656179351">
        <mark key="'" line="219" column="19" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="888" column="1" />
        <mark key="." line="0" column="0" />
      </file>
      <file name="/ScanController.java" timestamp="1519656159749">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="888" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" timestamp="1519699697416">
        <mark key="'" line="263" column="124" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/prod/pointshub/app/controllers/console/PrizeManager.java" timestamp="1519701492841">
        <mark key="[" line="375" column="26" />
        <mark key="]" line="375" column="31" />
        <mark key="^" line="375" column="31" />
        <mark key="." line="375" column="31" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/conf/application-context.xml" timestamp="1519631945250">
        <mark key="'" line="103" column="0" />
        <mark key="[" line="43" column="54" />
        <mark key="]" line="43" column="67" />
        <mark key="." line="43" column="67" />
        <mark key="^" line="43" column="67" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/pointshub/conf/routes" timestamp="1519644319762">
        <mark key="'" line="62" column="184" />
        <mark key="[" line="371" column="496" />
        <mark key="]" line="371" column="497" />
        <mark key="." line="371" column="497" />
      </file>
      <file name="/fragment.java" timestamp="1519700913071">
        <mark key="[" line="0" column="0" />
      </file>
      <file name="/HttpUtil.java" timestamp="1519656425069">
        <mark key="'" line="0" column="0" />
        <mark key="[" line="0" column="0" />
        <mark key="]" line="117" column="0" />
      </file>
      <file name="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/application.conf" timestamp="1519694488950">
        <mark key="'" line="167" column="0" />
      </file>
    </filemarks>
    <jumps>
      <jump line="60" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate.sql" />
      <jump line="124" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate.sql" />
      <jump line="18" column="28" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate.sql" />
      <jump line="58" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate.sql" />
      <jump line="64" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2018-01-29.sql" />
      <jump line="375" column="40" filename="$USER_HOME$/workspace/jinhui/pointshub/conf/routes" />
      <jump line="16" column="95" filename="$USER_HOME$/workspace/jinhui/pointshub/conf/routes" />
      <jump line="40" column="9" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="120" column="16" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="115" column="11" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="191" column="104" filename="$USER_HOME$/workspace/jinhui/crm/conf/routes" />
      <jump line="42" column="67" filename="$USER_HOME$/workspace/jinhui/crm/conf/application-context.xml" />
      <jump line="107" column="16" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="18" column="1" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="19" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/2017-11-25.sql" />
      <jump line="20" column="51" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/积分角色初始化.sql" />
      <jump line="725" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/积分角色初始化.sql" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/pointshub/migerate/积分角色初始化.sql" />
      <jump line="372" column="31" filename="$USER_HOME$/workspace/jinhui/pointshub/conf/routes" />
      <jump line="62" column="184" filename="$USER_HOME$/workspace/jinhui/pointshub/conf/routes" />
      <jump line="360" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="435" column="26" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="437" column="14" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="439" column="26" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="434" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="3" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="16" column="19" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="18" column="22" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="19" column="23" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="24" column="12" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="33" column="23" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="447" column="32" filename="/ScanController.java" />
      <jump line="0" column="0" filename="/ScanController.java" />
      <jump line="110" column="12" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="1" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="220" column="27" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="243" column="34" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="271" column="15" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="372" column="20" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="374" column="20" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="378" column="20" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="381" column="16" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="386" column="20" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="388" column="20" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="444" column="60" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="456" column="14" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="457" column="28" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="475" column="67" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="219" column="19" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/controllers/ScanController.java" />
      <jump line="19" column="29" filename="/mobCalls.scala.html" />
      <jump line="0" column="0" filename="/mobCalls.scala.html" />
      <jump line="11" column="24" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/views/mobCalls.scala.html" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/views/mobCalls.scala.html" />
      <jump line="20" column="32" filename="/HttpUtil.java" />
      <jump line="0" column="0" filename="/HttpUtil.java" />
      <jump line="27" column="8" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/util/redpack/HttpUtil.java" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/app/util/redpack/HttpUtil.java" />
      <jump line="38" column="41" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/application-context.xml" />
      <jump line="97" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/application-context.xml" />
      <jump line="248" column="8" filename="/TrayServiceImpl.java" />
      <jump line="160" column="7" filename="$USER_HOME$/workspace/jinhui/jh_clear/anti/app/service/impl/TrayServiceImpl.java" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/jh_clear/anti/app/service/impl/TrayServiceImpl.java" />
      <jump line="159" column="21" filename="/TrayServiceImpl.java" />
      <jump line="0" column="0" filename="/TrayServiceImpl.java" />
      <jump line="2" column="26" filename="$USER_HOME$/workspace/jinhui/jh_clear/anti/app/service/impl/TrayServiceImpl.java" />
      <jump line="167" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/application.conf" />
      <jump line="0" column="0" filename="$USER_HOME$/workspace/jinhui/clear/pointshub/conf/routes" />
      <jump line="20" column="4" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="15" column="4" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="8" column="17" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="46" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="53" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="54" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="55" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="56" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="57" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="59" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="60" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="61" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="62" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="63" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="64" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="65" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="66" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="67" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="68" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="69" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="70" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="71" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="72" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="73" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="74" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="75" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="76" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="77" column="115" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="58" column="42" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
      <jump line="263" column="124" filename="$USER_HOME$/workspace/jinhui/prod/pointshub/conf/routes" />
    </jumps>
    <registers>
      <register name="&quot;" type="4">
        <text>基本废物......</text>
      </register>
      <register name="*" type="4">
        <text>[]</text>
      </register>
      <register name="-" type="4">
        <text encoding="base64">c3luY2hyb25pemVkIA==</text>
      </register>
      <register name="/" type="4">
        <text>login</text>
      </register>
      <register name="0" type="2">
        <text encoding="base64">ICAgIHB1YmxpYyBzeW5jaHJvbml6ZWQgU3RyaW5nIGFkZFRyYXlJbmZvKFN0cmluZ1tdIGNvZGVBcnIpIHRocm93cyBFeGNlcHRpb24gewo=</text>
      </register>
      <register name="1" type="2">
        <text encoding="base64">LyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqCiAqIOmHkeW+vemYsueqnOi0p+ezu+e7nwogKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioKICogVHJheVNlcnZpY2VJbXBsLmphdmEKICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCiAqIChDKSDmsojpmLPlhavnu7Tml7bnqbrnp5HmioDlj5HlsZUKICogICAgIFNIRU5ZQU5HIEVJR0hUU1BBQ0UgVEVDSE5PTE9HWSBERVZFTE9QTUVOVCBDTy4sTFRELiAgMjAxNAogKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KICogVmVyc2lvbiAgICBEYXRlICAgICAgIEJ5ICAgICAgICAgICAgQ29tbWVudAogKiAxLjAgICAgICAgIDIwMTTlubQ15pyIMjbml6UgICAgQW5keSAgICAgICAgICDmlrDlu7oKICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqLwo=</text>
      </register>
      <register name="2" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="3" type="2">
        <text encoding="base64">ICAgICAgICA8IS0tPHByb3BlcnR5IG5hbWU9InVybCIgdmFsdWU9ImpkYmM6cG9zdGdyZXNxbDovLzExMS40LjExNy43MTo1NDMyL3BvaW50c2h1YiIvPi0tPgogICAgICAgIDwhLS08cHJvcGVydHkgbmFtZT0idXNlcm5hbWUiIHZhbHVlPSJwb2ludHNodWIiLz4tLT4KICAgICAgICA8IS0tPHByb3BlcnR5IG5hbWU9InBhc3N3b3JkIiB2YWx1ZT0icG9pbnRzaHViMTIzIi8+LS0+Cg==</text>
      </register>
      <register name="4" type="2">
        <text encoding="base64">cGFja2FnZSB1dGlsLnJlZHBhY2s7CgppbXBvcnQgamF2YS5pby5CdWZmZXJlZFJlYWRlcjsKaW1wb3J0IGphdmEuaW8uSW5wdXRTdHJlYW07CmltcG9ydCBqYXZhLmlvLklucHV0U3RyZWFtUmVhZGVyOwppbXBvcnQgamF2YS5zZWN1cml0eS5LZXlTdG9yZTsKaW1wb3J0IGphdmEudXRpbC5yZWdleC5NYXRjaGVyOwppbXBvcnQgamF2YS51dGlsLnJlZ2V4LlBhdHRlcm47CgppbXBvcnQgamF2YXgubmV0LnNzbC5TU0xDb250ZXh0OwoKaW1wb3J0IG9yZy5hcGFjaGUuaHR0cC5IdHRwRW50aXR5OwppbXBvcnQgb3JnLmFwYWNoZS5odHRwLmNsaWVudC5tZXRob2RzLkNsb3NlYWJsZUh0dHBSZXNwb25zZTsKaW1wb3J0IG9yZy5hcGFjaGUuaHR0cC5jbGllbnQubWV0aG9kcy5IdHRwUG9zdDsKaW1wb3J0IG9yZy5hcGFjaGUuaHR0cC5jb25uLnNzbC5TU0xDb25uZWN0aW9uU29ja2V0RmFjdG9yeTsKaW1wb3J0IG9yZy5hcGFjaGUuaHR0cC5jb25uLnNzbC5TU0xDb250ZXh0czsKaW1wb3J0IG9yZy5hcGFjaGUuaHR0cC5lbnRpdHkuU3RyaW5nRW50aXR5OwppbXBvcnQgb3JnLmFwYWNoZS5odHRwLmltcGwuY2xpZW50LkNsb3NlYWJsZUh0dHBDbGllbnQ7CmltcG9ydCBvcmcuYXBhY2hlLmh0dHAuaW1wbC5jbGllbnQuSHR0cENsaWVudHM7CmltcG9ydCBvcmcuYXBhY2hlLmh0dHAudXRpbC5FbnRpdHlVdGlsczsKCmltcG9ydCB1dGlsLkZpbGVDb21tb25VdGlsOwoKCnB1YmxpYyBjbGFzcyBIdHRwVXRpbCB7CiAgICAKICAgIHB1YmxpYyBzdGF0aWMgU3RyaW5nIHdlY2hhdFBvc3QoU3RyaW5nIHVybCxTdHJpbmcgcGFyYW1zLCBJbnB1dFN0cmVhbSBrZXlTdHJlYW0gKSB0aHJvd3MgRXhjZXB0aW9uewogICAgICAgIAogICAgICAgIFN0cmluZyBtY2hJZCA9ICBGaWxlQ29tbW9uVXRpbC5nZXRTeXNDZmdQcm9wKCJtY2hJZCIpOyAvLzEyNzY4MTU5MDEKICAgICAgICAKICAgICAgICBLZXlTdG9yZSBrZXlTdG9yZSAgPSBLZXlTdG9yZS5nZXRJbnN0YW5jZSgiUEtDUzEyIik7CiAgICAgICAgdHJ5IHsKICAgICAgICAgICAga2V5U3RvcmUubG9hZChrZXlTdHJlYW0sIG1jaElkLnRvQ2hhckFycmF5KCkpOwogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIGtleVN0cmVhbS5jbG9zZSgpOwogICAgICAgIH0KCiAgICAgICAgLy8gVHJ1c3Qgb3duIENBIGFuZCBhbGwgc2VsZi1zaWduZWQgY2VydHMKICAgICAgICBTU0xDb250ZXh0IHNzbGNvbnRleHQgPSBTU0xDb250ZXh0cy5jdXN0b20oKQogICAgICAgICAgICAgICAgLmxvYWRLZXlNYXRlcmlhbChrZXlTdG9yZSwgbWNoSWQudG9DaGFyQXJyYXkoKSkKICAgICAgICAgICAgICAgIC5idWlsZCgpOwogICAgICAgIC8vIEFsbG93IFRMU3YxIHByb3RvY29sIG9ubHkKICAgICAgICBTU0xDb25uZWN0aW9uU29ja2V0RmFjdG9yeSBzc2xzZiA9IG5ldyBTU0xDb25uZWN0aW9uU29ja2V0RmFjdG9yeSgKICAgICAgICAgICAgICAgIHNzbGNvbnRleHQsCiAgICAgICAgICAgICAgICBuZXcgU3RyaW5nW10geyAiVExTdjEiIH0sCiAgICAgICAgICAgICAgICBudWxsLAogICAgICAgICAgICAgICAgU1NMQ29ubmVjdGlvblNvY2tldEZhY3RvcnkuQlJPV1NFUl9DT01QQVRJQkxFX0hPU1ROQU1FX1ZFUklGSUVSKTsKICAgICAgICBDbG9zZWFibGVIdHRwQ2xpZW50IGh0dHBjbGllbnQgPSBIdHRwQ2xpZW50cy5jdXN0b20oKQogICAgICAgICAgICAgICAgLnNldFNTTFNvY2tldEZhY3Rvcnkoc3Nsc2YpCiAgICAgICAgICAgICAgICAuYnVpbGQoKTsKICAgICAgICB0cnkgewogICAgICAgICAgICBTdHJpbmcgcmVzcCA9ICIiOwoKICAgICAgICAgICAgSHR0cFBvc3QgaHR0cFBvc3QgPSBuZXcgSHR0cFBvc3QodXJsKTsKICAgICAgICAgICAgU3RyaW5nRW50aXR5IGVudCA9IG5ldyBTdHJpbmdFbnRpdHkocGFyYW1zLCJ1dGYtOCIpOyAgICAKICAgICAgICAgICAgZW50LnNldENvbnRlbnRUeXBlKCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQiKTsgICAKICAgICAgICAgICAgaHR0cFBvc3Quc2V0RW50aXR5KGVudCk7ICAKICAgICAgICAgICAgCiAgICAgICAgICAgIENsb3NlYWJsZUh0dHBSZXNwb25zZSByZXNwb25zZSA9IGh0dHBjbGllbnQuZXhlY3V0ZShodHRwUG9zdCk7CiAgICAgICAgICAgIHRyeSB7CiAgICAgICAgICAgICAgICBIdHRwRW50aXR5IGVudGl0eSA9IHJlc3BvbnNlLmdldEVudGl0eSgpOwoKICAgICAgICAgICAgICAgIGlmIChlbnRpdHkgIT0gbnVsbCkgewogICAgICAgICAgICAgICAgICAgIFN5c3RlbS5vdXQucHJpbnRsbigiUmVzcG9uc2UgY29udGVudCBsZW5ndGg6ICIgKyBlbnRpdHkuZ2V0Q29udGVudExlbmd0aCgpKTsKICAgICAgICAgICAgICAgICAgICBCdWZmZXJlZFJlYWRlciBidWZmZXJlZFJlYWRlciA9IG5ldyBCdWZmZXJlZFJlYWRlcihuZXcgSW5wdXRTdHJlYW1SZWFkZXIoZW50aXR5LmdldENvbnRlbnQoKSkpOwogICAgICAgICAgICAgICAgICAgIFN0cmluZyB0ZXh0OwogICAgICAgICAgICAgICAgICAgIHdoaWxlICgodGV4dCA9IGJ1ZmZlcmVkUmVhZGVyLnJlYWRMaW5lKCkpICE9IG51bGwpIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmVzcCArPSB0ZXh0OwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIEVudGl0eVV0aWxzLmNvbnN1bWUoZW50aXR5KTsKICAgICAgICAgICAgICAgIHJldHVybiByZXNwOwogICAgICAgICAgICB9Y2F0Y2goRXhjZXB0aW9uIGUpewogICAgICAgICAgICB9CiAgICAgICAgICAgIGZpbmFsbHkgewogICAgICAgICAgICAgICAgcmVzcG9uc2UuY2xvc2UoKTsKICAgICAgICAgICAgfQogICAgICAgIH0gZmluYWxseSB7CiAgICAgICAgICAgIGh0dHBjbGllbnQuY2xvc2UoKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgcmV0dXJuIG51bGw7CiAgICB9CgogICAgcHVibGljIHN0YXRpYyBTdHJpbmcgZ2V0SHR0cHNVcmxIb3N0KFN0cmluZyB1cmwpIHsKICAgICAgICBQYXR0ZXJuIHAgPSBQYXR0ZXJuLmNvbXBpbGUoIl5odHRwczovL1teL10qIiwgUGF0dGVybi5DQVNFX0lOU0VOU0lUSVZFKTsKICAgICAgICBNYXRjaGVyIG1hdGNoZXIgPSBwLm1hdGNoZXIodXJsKTsKICAgICAgICBpZiAobWF0Y2hlci5maW5kKCkpIHsKICAgICAgICAgICAgU3RyaW5nIGJhc2VVcmkgPSBtYXRjaGVyLmdyb3VwKCk7CiAgICAgICAgICAgIHJldHVybiBiYXNlVXJpOwogICAgICAgIH0KICAgICAgICByZXR1cm4gbnVsbDsKICAgIH0KCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7CiAgICAgICAgU3RyaW5nIHVybCA9ICJodHRwczovL2FwaS5tY2gud2VpeGluLnFxLmNvbS9tbXBheW1rdHRyYW5zZmVycy9zZW5kcmVkcGFjayI7CiAgICAgICAgU3lzdGVtLm91dC5wcmludGxuKGdldEh0dHBzVXJsSG9zdCh1cmwpKTsKICAgIH0KfQo=</text>
      </register>
      <register name="5" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="6" type="2">
        <text encoding="base64"></text>
      </register>
      <register name="7" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name="8" type="2">
        <text encoding="base64">Q09NTUVOVCBPTiBDT05TVFJBSU5UIHJvbGVpZCBPTiBwb2ludHNodWJfcm9sZSBJUyAn5Li76ZSuJzsK</text>
      </register>
      <register name="9" type="2">
        <text encoding="base64">Cg==</text>
      </register>
      <register name=":" type="4">
        <text>w</text>
      </register>
    </registers>
    <search>
      <last-search>login</last-search>
      <last-offset />
      <last-pattern>login</last-pattern>
      <last-replace>]</last-replace>
      <last-substitute encoding="base64">Pg==</last-substitute>
      <last-dir>1</last-dir>
      <show-last>true</show-last>
    </search>
    <history>
      <history-search>
        <entry>@</entry>
        <entry>\\@\\*</entry>
        <entry>time</entry>
        <entry encoding="base64">PA==</entry>
        <entry encoding="base64">Pg==</entry>
        <entry>reload</entry>
        <entry>conn</entry>
        <entry encoding="base64">XDxyZW1pbmRMaXN0XD4=</entry>
        <entry>routes</entry>
        <entry>initLogin</entry>
        <entry>prize</entry>
        <entry>scanEvent</entry>
        <entry>menu</entry>
        <entry>tree</entry>
        <entry>领取积分</entry>
        <entry>Log</entry>
        <entry>verifyS</entry>
        <entry>addTrayInfo</entry>
        <entry>console</entry>
        <entry>login</entry>
      </history-search>
      <history-cmd>
        <entry encoding="base64">JzwsJz5zL1xcbi8vZw==</entry>
        <entry encoding="base64">JzwsJz5zL1xcIi9gL2c=</entry>
        <entry encoding="base64">JzwsJz5zL2AvXFwiL2c=</entry>
        <entry encoding="base64">JzwsJz5zL1xcIi8vZw==</entry>
        <entry encoding="base64">JzwsJz5zLzsvPS9n</entry>
        <entry encoding="base64">JzwsJz5zL3RhYmxlLmdldENvbHVtbigpLmdldChpKS9jb2wvZw==</entry>
        <entry encoding="base64">JzwsJz5zL0xvZ2dlci5kL2xvZ2dlci5kZWJ1Zy9n</entry>
        <entry encoding="base64">JzwsJz5zLywvXG4vZw==</entry>
        <entry encoding="base64">JzwsJz5zLy0vL2c=</entry>
        <entry>se wrap</entry>
        <entry encoding="base64">JzwsJz5zLykoLywvZw==</entry>
        <entry encoding="base64">JzwsJz5zL0AqLy9n</entry>
        <entry encoding="base64">JzwsJz5zLyovL2c=</entry>
        <entry encoding="base64">JzwsJz5zL0AvL2c=</entry>
        <entry encoding="base64">JzwsJz5zL1xcQFxcKi8vZw==</entry>
        <entry>vsp</entry>
        <entry>action $Redo</entry>
        <entry encoding="base64">JzwsJz5zLzwvWy9n</entry>
        <entry encoding="base64">JzwsJz5zLz4vXS9n</entry>
        <entry>w</entry>
      </history-cmd>
      <history-expr />
      <history-input />
    </history>
    <shortcut-conflicts>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed D</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed F</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed B</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed N</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed R</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed A</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed T</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed I</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed V</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed H</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed O</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed P</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed M</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed E</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>shift ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed 2</text>
      </shortcut-conflict>
      <shortcut-conflict owner="ide">
        <text>ctrl pressed Q</text>
      </shortcut-conflict>
      <shortcut-conflict owner="vim">
        <text>ctrl pressed G</text>
      </shortcut-conflict>
    </shortcut-conflicts>
  </component>
</application>